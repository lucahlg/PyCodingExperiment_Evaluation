EXECUTE
%pip install pandas matplotlib
STDOUT/STDERR
Requirement already satisfied: pandas in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (2.2.3)
Requirement already satisfied: matplotlib in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (3.9.2)
Requirement already satisfied: numpy>=1.26.0 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from pandas) (1.26.4)
Requirement already satisfied: python-dateutil>=2.8.2 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from pandas) (2.9.0.post0)
Requirement already satisfied: pytz>=2020.1 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from pandas) (2024.2)
Requirement already satisfied: tzdata>=2022.7 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from pandas) (2024.2)
Requirement already satisfied: contourpy>=1.0.1 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (1.3.0)
Requirement already satisfied: cycler>=0.10 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (4.54.1)
Requirement already satisfied: kiwisolver>=1.3.1 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (1.4.7)
Requirement already satisfied: packaging>=20.0 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (24.1)
Requirement already satisfied: pillow>=8 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (10.4.0)
Requirement already satisfied: pyparsing>=2.3.1 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from matplotlib) (3.2.0)
Requirement already satisfied: six>=1.5 in /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)

[notice] A new release of pip is available: 24.2 -> 24.3.1
[notice] To update, run: pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
import pandas as pd

# Load the dataset
file_path = 'wiki4he/wiki4HE.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
data.head()
STDOUT/STDERR
  AGE;GENDER;DOMAIN;PhD;YEARSEXP;UNIVERSITY;UOC_POSITION;OTHER_POSITION;OTHERSTATUS;USERWIKI;PU1;PU2;PU3;PEU1;PEU2;PEU3;ENJ1;ENJ2;Qu1;Qu2;Qu3;Qu4;Qu5;Vis1;Vis2;Vis3;Im1;Im2;Im3;SA1;SA2;SA3;Use1;Use2;Use3;Use4;Use5;Pf1;Pf2;Pf3;JR1;JR2;BI1;BI2;Inc1;Inc2;Inc3;Inc4;Exp1;Exp2;Exp3;Exp4;Exp5
0  40;0;2;1;14;1;2;?;?;0;4;4;3;5;5;3;4;4;3;3;2;2;...                                                                                                                                                                                                                                          
1  42;0;5;1;18;1;2;?;?;0;2;3;3;4;4;3;3;4;4;4;3;3;...                                                                                                                                                                                                                                          
2  37;0;4;1;13;1;3;?;?;0;2;2;2;4;4;3;3;3;2;2;2;5;...                                                                                                                                                                                                                                          
3  40;0;4;0;13;1;3;?;?;0;3;3;4;3;3;3;4;3;3;4;3;3;...                                                                                                                                                                                                                                          
4  51;0;6;0;8;1;3;?;?;1;4;3;5;5;4;3;4;4;4;5;4;3;4...
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
# Load the dataset with the correct delimiter
data = pd.read_csv(file_path, delimiter=';')

# Display the first few rows of the dataset
data.head()
STDOUT/STDERR
   AGE  GENDER DOMAIN  PhD YEARSEXP  UNIVERSITY UOC_POSITION OTHER_POSITION  \
0   40       0      2    1       14           1            2              ?   
1   42       0      5    1       18           1            2              ?   
2   37       0      4    1       13           1            3              ?   
3   40       0      4    0       13           1            3              ?   
4   51       0      6    0        8           1            3              ?   

  OTHERSTATUS USERWIKI  ... BI2 Inc1 Inc2 Inc3 Inc4 Exp1 Exp2 Exp3 Exp4 Exp5  
0           ?        0  ...   3    5    5    5    5    4    4    4    1    2  
1           ?        0  ...   2    4    4    3    4    2    2    4    2    4  
2           ?        0  ...   1    5    3    5    5    2    2    2    1    3  
3           ?        0  ...   3    3    4    4    3    4    4    3    3    4  
4           ?        1  ...   5    5    5    4    4    5    5    5    4    4  

[5 rows x 53 columns]
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
import matplotlib.pyplot as plt

# Summary statistics for age and years of experience
age_summary = data['AGE'].describe()
years_exp_summary = data['YEARSEXP'].describe()

# Count of respondents by domain
domain_counts = data['DOMAIN'].value_counts()

# Count of respondents by job position
job_position_counts = data['UOC_POSITION'].value_counts()

# Plotting the demographic information
fig, axs = plt.subplots(2, 2, figsize=(15, 10))

# Age distribution
axs[0, 0].hist(data['AGE'], bins=10, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Age Distribution')
axs[0, 0].set_xlabel('Age')
axs[0, 0].set_ylabel('Frequency')

# Years of experience distribution
axs[0, 1].hist(data['YEARSEXP'], bins=10, color='lightgreen', edgecolor='black')
axs[0, 1].set_title('Years of Experience Distribution')
axs[0, 1].set_xlabel('Years of Experience')
axs[0, 1].set_ylabel('Frequency')

# Domain distribution
domain_counts.plot(kind='bar', ax=axs[1, 0], color='salmon', edgecolor='black')
axs[1, 0].set_title('Domain Distribution')
axs[1, 0].set_xlabel('Domain')
axs[1, 0].set_ylabel('Frequency')

# Job position distribution
job_position_counts.plot(kind='bar', ax=axs[1, 1], color='lightcoral', edgecolor='black')
axs[1, 1].set_title('Job Position Distribution')
axs[1, 1].set_xlabel('Job Position')
axs[1, 1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

age_summary, years_exp_summary, domain_counts, job_position_counts
STDOUT/STDERR
<Figure size 1500x1000 with 4 Axes>
image

(count    913.000000
 mean      42.246440
 std        8.058418
 min       23.000000
 25%       36.000000
 50%       42.000000
 75%       47.000000
 max       69.000000
 Name: AGE, dtype: float64,
 count     913
 unique     37
 top        10
 freq       77
 Name: YEARSEXP, dtype: object,
 DOMAIN
 6    361
 1    183
 4    137
 5    101
 3     73
 2     56
 ?      2
 Name: count, dtype: int64,
 UOC_POSITION
 6    659
 ?    113
 2     68
 3     50
 4     18
 1      3
 5      2
 Name: count, dtype: int64)
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
# Identify columns corresponding to survey questions
survey_columns = data.columns[10:]  # Survey questions start from the 11th column

# Calculate the proportion of extreme responses (1 or 5) for each question
extreme_responses = {}
for col in survey_columns:
    extreme_count = data[col].value_counts().get(1, 0) + data[col].value_counts().get(5, 0)
    extreme_proportion = extreme_count / len(data)
    extreme_responses[col] = extreme_proportion

# Sort the questions by the proportion of extreme responses
sorted_extreme_responses = sorted(extreme_responses.items(), key=lambda x: x[1], reverse=True)
sorted_extreme_responses
STDOUT/STDERR
[('SA1', 0.38663745892661555),
 ('Qu2', 0.384446878422782),
 ('PEU1', 0.36254107338444685),
 ('Im1', 0.34611171960569553),
 ('Qu1', 0.34501642935377874),
 ('SA2', 0.343921139101862),
 ('Inc2', 0.3231106243154436),
 ('Im2', 0.3209200438116101),
 ('Use5', 0.3209200438116101),
 ('PEU2', 0.31653888280394304),
 ('SA3', 0.31653888280394304),
 ('Inc3', 0.3143483023001095),
 ('Use1', 0.3132530120481928),
 ('Inc1', 0.3132530120481928),
 ('Inc4', 0.312157721796276),
 ('JR2', 0.29353778751369114),
 ('PEU3', 0.29244249726177435),
 ('Qu5', 0.28806133625410735),
 ('Im3', 0.28806133625410735),
 ('PU2', 0.2792990142387733),
 ('PU3', 0.2792990142387733),
 ('Use4', 0.2792990142387733),
 ('JR1', 0.2792990142387733),
 ('Qu4', 0.276013143483023),
 ('Qu3', 0.27491785323110624),
 ('BI2', 0.2738225629791895),
 ('PU1', 0.26944140197152244),
 ('Exp1', 0.2683461117196057),
 ('BI1', 0.2606790799561884),
 ('Exp3', 0.25848849945235486),
 ('Use3', 0.2573932092004381),
 ('Exp2', 0.2552026286966046),
 ('Vis3', 0.25191675794085433),
 ('ENJ1', 0.2508214676889376),
 ('Pf1', 0.2508214676889376),
 ('ENJ2', 0.2497261774370208),
 ('Vis1', 0.2475355969331873),
 ('Pf3', 0.2475355969331873),
 ('Use2', 0.24534501642935377),
 ('Exp5', 0.244249726177437),
 ('Pf2', 0.2420591456736035),
 ('Exp4', 0.20810514786418402),
 ('Vis2', 0.2004381161007667)]
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
# List all column names to identify relevant columns
data.columns.tolist()
STDOUT/STDERR
['AGE',
 'GENDER',
 'DOMAIN',
 'PhD',
 'YEARSEXP',
 'UNIVERSITY',
 'UOC_POSITION',
 'OTHER_POSITION',
 'OTHERSTATUS',
 'USERWIKI',
 'PU1',
 'PU2',
 'PU3',
 'PEU1',
 'PEU2',
 'PEU3',
 'ENJ1',
 'ENJ2',
 'Qu1',
 'Qu2',
 'Qu3',
 'Qu4',
 'Qu5',
 'Vis1',
 'Vis2',
 'Vis3',
 'Im1',
 'Im2',
 'Im3',
 'SA1',
 'SA2',
 'SA3',
 'Use1',
 'Use2',
 'Use3',
 'Use4',
 'Use5',
 'Pf1',
 'Pf2',
 'Pf3',
 'JR1',
 'JR2',
 'BI1',
 'BI2',
 'Inc1',
 'Inc2',
 'Inc3',
 'Inc4',
 'Exp1',
 'Exp2',
 'Exp3',
 'Exp4',
 'Exp5']
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
# Calculate the average response for consulting Wikipedia (Use1) and citing Wikipedia (Use2) by domain
consult_wikipedia_by_domain = data.groupby('DOMAIN')['Use1'].mean()
cite_wikipedia_by_domain = data.groupby('DOMAIN')['Use2'].mean()

consult_wikipedia_by_domain, cite_wikipedia_by_domain
STDOUT/STDERR
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:1942, in GroupBy._agg_py_fallback(self, how, values, ndim, alt)
   1941 try:
-> 1942     res_values = self._grouper.agg_series(ser, alt, preserve_dtype=True)
   1943 except Exception as err:

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/ops.py:864, in BaseGrouper.agg_series(self, obj, func, preserve_dtype)
    862     preserve_dtype = True
--> 864 result = self._aggregate_series_pure_python(obj, func)
    866 npvalues = lib.maybe_convert_objects(result, try_float=False)

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/ops.py:885, in BaseGrouper._aggregate_series_pure_python(self, obj, func)
    884 for i, group in enumerate(splitter):
--> 885     res = func(group)
    886     res = extract_result(res)

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:2454, in GroupBy.mean.<locals>.<lambda>(x)
   2451 else:
   2452     result = self._cython_agg_general(
   2453         "mean",
-> 2454         alt=lambda x: Series(x, copy=False).mean(numeric_only=numeric_only),
   2455         numeric_only=numeric_only,
   2456     )
   2457     return result.__finalize__(self.obj, method="groupby")

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/series.py:6549, in Series.mean(self, axis, skipna, numeric_only, **kwargs)
   6541 @doc(make_doc("mean", ndim=1))
   6542 def mean(
   6543     self,
   (...)
   6547     **kwargs,
   6548 ):
-> 6549     return NDFrame.mean(self, axis, skipna, numeric_only, **kwargs)

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/generic.py:12420, in NDFrame.mean(self, axis, skipna, numeric_only, **kwargs)
  12413 def mean(
  12414     self,
  12415     axis: Axis | None = 0,
   (...)
  12418     **kwargs,
  12419 ) -> Series | float:
> 12420     return self._stat_function(
  12421         "mean", nanops.nanmean, axis, skipna, numeric_only, **kwargs
  12422     )

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/generic.py:12377, in NDFrame._stat_function(self, name, func, axis, skipna, numeric_only, **kwargs)
  12375 validate_bool_kwarg(skipna, "skipna", none_allowed=False)
> 12377 return self._reduce(
  12378     func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only
  12379 )

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/series.py:6457, in Series._reduce(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)
   6453     raise TypeError(
   6454         f"Series.{name} does not allow {kwd_name}={numeric_only} "
   6455         "with non-numeric dtypes."
   6456     )
-> 6457 return op(delegate, skipna=skipna, **kwds)

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/nanops.py:147, in bottleneck_switch.__call__.<locals>.f(values, axis, skipna, **kwds)
    146 else:
--> 147     result = alt(values, axis=axis, skipna=skipna, **kwds)
    149 return result

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/nanops.py:404, in _datetimelike_compat.<locals>.new_func(values, axis, skipna, mask, **kwargs)
    402     mask = isna(values)
--> 404 result = func(values, axis=axis, skipna=skipna, mask=mask, **kwargs)
    406 if datetimelike:

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/nanops.py:720, in nanmean(values, axis, skipna, mask)
    719 the_sum = values.sum(axis, dtype=dtype_sum)
--> 720 the_sum = _ensure_numeric(the_sum)
    722 if axis is not None and getattr(the_sum, "ndim", False):

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/nanops.py:1701, in _ensure_numeric(x)
   1699 if isinstance(x, str):
   1700     # GH#44008, GH#36703 avoid casting e.g. strings to numeric
-> 1701     raise TypeError(f"Could not convert string '{x}' to numeric")
   1702 try:

TypeError: Could not convert string '12252141343313133421231413422142321213333133322432222213324313221313421?323432225131342322121533224112323314?11211211213113233222122113341111113114132?221321123111142?3112112241121122' to numeric

The above exception was the direct cause of the following exception:

TypeError                                 Traceback (most recent call last)
Cell In[1], line 2
      1 # Calculate the average response for consulting Wikipedia (Use1) and citing Wikipedia (Use2) by domain
----> 2 consult_wikipedia_by_domain = data.groupby('DOMAIN')['Use1'].mean()
      3 cite_wikipedia_by_domain = data.groupby('DOMAIN')['Use2'].mean()
      5 consult_wikipedia_by_domain, cite_wikipedia_by_domain

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:2452, in GroupBy.mean(self, numeric_only, engine, engine_kwargs)
   2445     return self._numba_agg_general(
   2446         grouped_mean,
   2447         executor.float_dtype_mapping,
   2448         engine_kwargs,
   2449         min_periods=0,
   2450     )
   2451 else:
-> 2452     result = self._cython_agg_general(
   2453         "mean",
   2454         alt=lambda x: Series(x, copy=False).mean(numeric_only=numeric_only),
   2455         numeric_only=numeric_only,
   2456     )
   2457     return result.__finalize__(self.obj, method="groupby")

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:1998, in GroupBy._cython_agg_general(self, how, alt, numeric_only, min_count, **kwargs)
   1995     result = self._agg_py_fallback(how, values, ndim=data.ndim, alt=alt)
   1996     return result
-> 1998 new_mgr = data.grouped_reduce(array_func)
   1999 res = self._wrap_agged_manager(new_mgr)
   2000 if how in ["idxmin", "idxmax"]:

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/internals/base.py:367, in SingleDataManager.grouped_reduce(self, func)
    365 def grouped_reduce(self, func):
    366     arr = self.array
--> 367     res = func(arr)
    368     index = default_index(len(res))
    370     mgr = type(self).from_array(res, index)

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:1995, in GroupBy._cython_agg_general.<locals>.array_func(values)
   1992     return result
   1994 assert alt is not None
-> 1995 result = self._agg_py_fallback(how, values, ndim=data.ndim, alt=alt)
   1996 return result

File /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:1946, in GroupBy._agg_py_fallback(self, how, values, ndim, alt)
   1944     msg = f"agg function failed [how->{how},dtype->{ser.dtype}]"
   1945     # preserve the kind of exception that raised
-> 1946     raise type(err)(msg) from err
   1948 if ser.dtype == object:
   1949     res_values = res_values.astype(object, copy=False)

TypeError: agg function failed [how->mean,dtype->object]
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
# Check unique values in Use1 and Use2 columns
use1_unique_values = data['Use1'].unique()
use2_unique_values = data['Use2'].unique()

use1_unique_values, use2_unique_values
STDOUT/STDERR
(array(['3', '2', '1', '4', '5', '?'], dtype=object),
 array(['1', '2', '3', '4', '5', '?'], dtype=object))
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
import numpy as np

# Replace '?' with NaN
data['Use1'] = data['Use1'].replace('?', np.nan).astype(float)
data['Use2'] = data['Use2'].replace('?', np.nan).astype(float)

# Calculate the average response for consulting Wikipedia (Use1) and citing Wikipedia (Use2) by domain
consult_wikipedia_by_domain = data.groupby('DOMAIN')['Use1'].mean()
cite_wikipedia_by_domain = data.groupby('DOMAIN')['Use2'].mean()

consult_wikipedia_by_domain, cite_wikipedia_by_domain
STDOUT/STDERR
(DOMAIN
 1    2.156425
 2    2.272727
 3    2.027778
 4    2.522059
 5    1.612245
 6    2.064426
 ?    3.500000
 Name: Use1, dtype: float64,
 DOMAIN
 1    1.787709
 2    2.018519
 3    1.777778
 4    2.014815
 5    1.673469
 6    1.806723
 ?    3.000000
 Name: Use2, dtype: float64)
[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]
EXECUTE
fig, axs = plt.subplots(1, 2, figsize=(15, 5))

# Plotting the average response for consulting Wikipedia by domain
consult_wikipedia_by_domain.plot(kind='bar', ax=axs[0], color='skyblue', edgecolor='black')
axs[0].set_title('Average Response for Consulting Wikipedia by Domain')
axs[0].set_xlabel('Domain')
axs[0].set_ylabel('Average Response')
axs[0].set_ylim(0, 5)

# Plotting the average response for citing Wikipedia by domain
cite_wikipedia_by_domain.plot(kind='bar', ax=axs[1], color='lightgreen', edgecolor='black')
axs[1].set_title('Average Response for Citing Wikipedia by Domain')
axs[1].set_xlabel('Domain')
axs[1].set_ylabel('Average Response')
axs[1].set_ylim(0, 5)

plt.tight_layout()
plt.show()
STDOUT/STDERR
<Figure size 1500x500 with 2 Axes>
image

[Jupyter current working directory: /workspace]
[Jupyter Python interpreter: /openhands/poetry/openhands-ai-5O4_aCHf-py3.12/bin/python]